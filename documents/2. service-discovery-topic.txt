Service discovery
========================
In any distributed architecture, we need to find the hostname or IP address of where a machine is located
is known formally as “service discovery.” Service discov- ery can
 be something as simple as maintaining a property file with the addresses of all the remote services used by an application, or something as formalized as a Uni- versal Description, Discovery, and Integration (UDDI) repository.

 Service discovery is critical to microservice, cloud-based applications for two key reasons:
 - Horizontal scaling or scale out —This pattern usually requires adjustments in the application architecture, such as adding more instances of a service inside a cloud service and more containers.
 - Resiliency —This pattern refers to the ability to absorb the impact of problems within an architecture or service without affecting the business. Microservice architectures need to be extremely sensitive to preventing a problem in a single service (or service instance) from cascading up and out to the consumers of the service.
    When a microservice instance becomes unhealthy or unavailable, most service discovery engines remove that instance from their internal list of available services.
    The damage caused by a down service is minimized because the service discovery engine routes services around the unavailable service.


- Highly available: If a node becomes unavailable, other nodes in the cluster should be able to take over.
All instances of this environment(cluster) have an identical configuration and work together to pro- vide high availability, reliability, and scalability

- Peer-to-peer: Each node in the service discovery cluster shares the state of a ser- vice instance.

- Load balanced: Service discovery needs to dynamically load balance requests across all service instances.

- Resilient: The service discovery’s client should cache service information locally.
Local caching allows for gradual degradation of the service discovery feature so that if the service discovery service becomes unavailable, applications can still function and locate the services based on the information maintained in their local cache.

- Fault tolerant: Service discovery needs to detect when a service instance isn’t healthy and remove that instance from the list of available services that can take client requests. It should detect these faults with services and take action with- out human intervention.

Concepts in service discovery
================================
- Service registration: Como un servicio se registra con el agente de service discovery.
- Client lookup of service address: Como un servicio cliente busca informacion del servicio
- Information Sharing: Como los nodos comparten informacion del servicio
- Health monitoring: Como los servicios comunican su estado de saludo al agente.

1. It contacts the discovery service for all the instances a service consumer (client) is asking for and then caches data locally on the service consumer’s machine.
2. Each time a client wants to call the service, the service consumer looks up the location information for the service from the cache. Usually, client-side caching will use a simple load-balancing algorithm like the round-robin load-balancing algorithm to ensure that service calls are spread across multiple service instances.
3. The client then periodically contacts the discovery service and refreshes its cache of service instances. The client cache is eventually consistent, but there’s always a risk that when the client contacts the service discovery instance for a refresh and calls are made, calls might be directed to a service instance that isn’t healthy.

Dependencias
==============
Netflix’s Eureka Service Discovery engine: Implements service discovery pattern
Spring Cloud Load Balancer(Reemplazo de ribbon): For the client-side load balancing

Notas:
Eureka won’t immediately advertise any services that register with it.
By default, it waits 5 minutes to give all of the services a chance to
 register with it before advertising them. Using this line for local
 testing helps to speed up the amount of time it takes for the Eureka
 service to start and to show the services registered with it.
 eureka.server.wait-time-in-ms-when-sync-empty: 5

 - Individual services registering with Eureka take up to 30 seconds to
  show up in the Eureka service.
  That’s because Eureka requires three consecu- tive
  heartbeat pings from the service, which are spaced 10 seconds apart,
  before it will say the service is ready for use. Keep this in mind as you’re deploying and testing your own services.

  http://localhost:8070/eureka/apps/licensing-service
  http://<eureka service>:8070/eureka/apps/<APPID>
  http://localhost:8070/eureka/apps/licensing-service

three different Spring/Netflix client libraries in which a service consumer
can interact with the Spring Cloud Load Balancer. These libraries will move
from the lowest level of abstraction for interacting with the Load Balancer
to the highest.

- Spring Discovery Client: @EnableDiscoveryClient  - Activa eureka discovery clien
is the trigger for Spring Cloud to enable the applica- tion to use the Discovery Client and the Spring Cloud Load Balancer libraries.
You should only use the Discovery Client when your service needs to query the Load Balancer to understand what services and service instances are registered with it
 -You aren’t taking advantage of the Spring Cloud client-side Load Balancer. By calling the Discovery Client directly, you get a list of services, but it becomes your responsibility to choose which returned service instance you’re going to invoke.
 - You’re doing too much work. In the code, you have to build the URL that you’ll use to call your service. It’s a small thing, but every piece of code that you can avoid writing is one less piece of code that you have to debug.

- Spring Discovery Client–enabled REST template

- Netflix Feign client
https://github.com/OpenFeign/feign/wiki/Custom-error-handling

Resumen:
- We use a service discovery pattern to abstract away the physical location of our services.
- A service discovery engine like Eureka can seamlessly add and remove service instances from an environment without impacting the service clients.
- Client-side load balancing can provide an extra level of performance and resil- iency by caching the physical location of a service on the client making the ser- vice call.
- You can use these three different mechanisms in Spring Cloud and Netflix Eureka to invoke a service: Spring Cloud Discovery Client, Spring Cloud Load Balancer–backed RestTemplate, and Netflix’s Feign client.

http://<licensing service Hostname/IP>:<licensing service Port>/v1/ organization/<organizationID>/license/<licenseID>/<client type( feign, discovery, rest)>



Eureka Self Preservation and Renewal.
===================================
During the start-up, the clients trigger a REST call with the Eureka server to self-register to the server's instance
registry. When a graceful shutdown occurs after use, the clients trigger another REST call so that the server can wipe
out all the data related to the caller.
To handle ungraceful client shutdowns the server expects heartbeats from the client at specific intervals.
This is called renewal. If the server stops receiving the heartbeat for a specified duration, then it will start
 evicting the stale instances.

 The mechanism that stops evicting the instances when the heartbeats are below the expected threshold is called
 self-preservation. This might happen in the case of a poor network partition, where the instances are still up,
 but just can't be reached for a moment or in the case of an abrupt client shutdown.

 And when the server activates self-preservation mode it holds the instance eviction until the renewal rate is back
 above the expected threshold.


Self-Preservation Configurations
========================================
By default, Eureka servers run with self-preservation enabled.
However, for the sake of our understanding, let's go through each of these configurations on the server-side.
eureka.server.enable-self-preservation: Configuration for disabling self-preservation – the default value is true
eureka.server.expected-client-renewal-interval-seconds: The server expects client heartbeats at an interval configured with this property – the default value is 30
eureka.instance.lease-expiration-duration-in-seconds: Indicates the time in seconds that the Eureka server waits since it received the last heartbeat from a client before it can remove that client from its registry – the default value is 90
eureka.server.eviction-interval-timer-in-ms: This property tells the Eureka server to run a job at this frequency to evict the expired clients – the default value is 60 seconds
eureka.server.renewal-percent-threshold: Based on this property, the server calculates the expected heartbeats per minute from all the registered clients – the default value is 0.85
eureka.server.renewal-threshold-update-interval-ms: This property tells the Eureka server to run a job at this frequency to calculate the expected heartbeats from all the registered clients at this minute – the default value is 15 minutes

https://www.baeldung.com/eureka-self-preservation-renewal

Dynamically reloading route configuration
==========================================
The ability to dynamically reload routes is useful because it allows us to change the mapping of routes without
having to restart the Gateway server(s).

Now, if we want to add new route mappings on the fly, all we have to do is make the changes to the configuration file
and commit those changes back to the Git repository where Spring Cloud Config pulls its configuration data.

Spring Actuator exposes a POST-based endpoint route, actuator/gateway/refresh, that will cause it to reload its route
configuration. Once this actuator/ gateway/refresh is reached, if you then enter the actuator/gateway/routes
endpoint, you’ll see that two new routes are exposed. The response of the actuator/gateway/refresh returns
an HTTP 200 status code without a response body.

Predicate and Filter factories
==============================
cuando queremos escribir una lógica personalizada que se aplicará contra todas las llamadas de servicio que fluyen a
través de la puerta de enlace. La mayoría de las veces, usaremos esta lógica personalizada para hacer cumplir un conjunto
consistente de políticas de aplicaciones como seguridad, registro y seguimiento entre todos los servicios.
Estas políticas de aplicación se consideran preocupaciones transversales porque queremos que estas estrategias se
apliquen a todos los servicios de nuestra aplicación sin tener que modificar cada uno para implementarlas.

De esta manera, las fábricas de filtros y predicados de Spring Cloud Gateway se pueden usar de manera similar a las
clases de aspecto de Spring. Estos pueden igualar o interceptar un amplio conjunto de comportamientos y decorar o
cambiar el comportamiento de la llamada sin que el codificador original se dé cuenta del cambio. Si bien un filtro de
 servlet o un aspecto de Spring se localiza en un servicio específico, el uso de la puerta de enlace y sus fábricas de
 filtros y predicados nos permite implementar preocupaciones transversales en todos los servicios que se enrutan a través
 de la puerta de enlace.

 gateway client -> gateway handler mapping(se encarga de verificar si la ruta solicitada coincide con la configuración
 de la ruta.) -> Gateway web handler(lee los filtros configurados para una ruta específica y luego pasa la solicitud a
 los filtros para su procesamiento.) -> Filter(order 0, 1 , n) -> Proxied service

 filter allows us to implement a chain of business logic that each service request passes through as it’s implemented

 Built in predicates
 ===================
 Los predicados integrados son objetos que nos permiten verificar si las solicitudes cumplen un conjunto de condiciones
  antes de ejecutarlas o procesarlas. Para cada ruta, podemos establecer múltiples fábricas de predicados, que se usan y
  combinan a través del AND lógico.
These predicates can be applied in the code programmatically or via configura- tions,

predicates:
    - Path=/organization/**
Before, After, Between, Header, Host, Method, Path, Query
Sample:
Before=2020-03-11T...
After=2020-03-11T...
Between=2020-03-11T...,2020-04-11T...
Header=X-Request-Id, \d+
Host=**.example.com
Method=GET
Path=/organization/{id}
Query=id, 1

Built in Filters
==================
Las fábricas de filtros integradas nos permiten inyectar puntos de cumplimiento de políticas en nuestro código y
realizar una gran cantidad de acciones en todas las llamadas de servicio de manera consistente. En otras palabras,
estos filtros nos permiten modificar las solicitudes y respuestas HTTP entrantes y salientes.

AddRequestHeader, AddResponseHeader, AddRequestParameter, PrefixPath, RequestRateLimiter,
RedirectTo, RemoveNonProxy, RemoveRequestHeader, RemoveResponseHeader,
RewritePath, SecureHeaders, SetPath, SetStatus, SetResponseHeader

Samples:
RemoveRequestHeader=X-Request-Foo
RemoveResponseHeader=X-Organization-ID
RewritePath=/organization/(?<path>.*), /$\{path}
SetPath=/{organization}
SetStatus=500
SetResponseHeader=X-Response-ID,123


Pre-filters: —A pre-filter is invoked before the actual request is sent to the target destination. A pre-filter usually
carries out the task of making sure that the service has a consistent message format (key HTTP headers are in place,
for example) or acts as a gatekeeper to ensure that the user calling the service is authenticated
(they are whom they say they are).

Post-filters—A post-filter is invoked after the target service, and a response is sent back to the client. Usually,
we implement a post-filter to log the response back from the target service, handle errors, or audit the response for
sensitive information.
