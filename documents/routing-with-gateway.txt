
En una arquitectura distribuida como un microservicio, llegará un punto en el que tendremos que asegurarnos de que se
produzcan comportamientos críticos como la seguridad, el registro y el seguimiento de usuarios en múltiples llamadas de
servicio. Para implementar esta funcionalidad, queremos que estos atributos se apliquen de manera consistente en todos
nuestros servicios sin la necesidad de que cada equipo de desarrollo individual construya su propia solución. Si bien
es posible usar una biblioteca o marco común para ayudar a desarrollar estas capacidades directamente en un servicio
individual, hacerlo tiene estas implicaciones:

- Es un desafío implementar estas capacidades en cada servicio de manera consistente.
- Impulsar las responsabilidades para implementar preocupaciones transversales como la seguridad y registrarse en los equipos de desarrollo individuales aumenta en gran medida las probabilidades de que alguien no las implemente correctamente o se olvide de hacerlo.
- Es posible crear una dependencia fuerte en todos nuestros servicios.

Para resolver este problema, debemos abstraer estas preocupaciones transversales en un servicio que pueda ubicarse de
 manera independiente y actuar como filtro y enrutador para todas las llamadas de microservicio en nuestra arquitectura.
  Llamamos a este servicio una puerta de enlace(GATEWAY)

Our service clients no longer directly call a microservice. Instead, all calls are routed through the service gateway,
which acts as a single Policy Enforcement Point (PEP), and are then routed to a final destination.

Un Gateway  actúa como intermediario entre el cliente del servicio y un servicio invocado. El cliente del servicio habla
solo con una única URL administrada por la puerta de enlace del servicio. La puerta de enlace del servicio separa la ruta
que proviene de la llamada del cliente del servicio y determina qué servicio está tratando de invocar el cliente del servicio.

The use of a centralized PEP means that cross-cutting service concerns can be carried out in a single place without the
 individual development teams having to implement those concerns. Examples of cross-cutting concerns that can be
  implemented in a service gateway include these:

- Static routing
- Dynamic routing
- Authentication and authorization
- Metric collection and logging


cuando presentamos Eureka, hablamos sobre cómo los balanceadores de carga centralizados pueden ser un único punto de
falla y un cuello de botella para sus servicios. Una puerta de enlace de servicios, si no se implementa correctamente,
puede conllevar el mismo riesgo. Tenga en cuenta lo siguiente cuando desarrolle la implementación de su puerta de enlace de servicio:

1. Load balancers are useful when placed in front of individual groups of services. In this case, a load balancer sitting
in front of multiple service gateway instances is an appropriate design and ensures that your service gateway implementation
 can scale as needed
2. Keep any code you write for your service gateway stateless. Don’t store any information in memory for the service
gateway. If you aren’t careful, you can limit the scalability of the gateway
3.  Keep the code you write for your service gateway light. The service gateway is the “chokepoint” for your service
invocation. Complex code with multiple database calls can be the source of difficult-to-track performance problems in
the service gateway.

 Nonblocking applications are written in such a way that the main threads are never blocked. Instead, these threads are
 always available to serve requests and to process them asynchronously in the background to return a response once
  processing is done

 Spring Cloud Gateway offers several capabilities, including
- Mapping the routes for all the services in your application to a single URL
- Building filters that can inspect and act on the requests and responses coming through the gateway.
- Building predicates, which are objects that allow us to check if the requests fulfill a set of given conditions before executing or processing a request.

En esencia, Spring Cloud Gateway es un proxy inverso. Un proxy inverso es un servidor intermedio que se encuentra entre
 el cliente que intenta llegar a un recurso y el recurso mismo.

 The client has no idea it’s even communicating with a server. The reverse proxy takes care of capturing the client’s
 request and then calls the remote resource on the client’s behalf.


 Automated mapping of routes using service discovery:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true // Enables the gateway to
                           create routes based on services registered with service discovery

          lowerCaseServiceId: true //Option to lower case serviceId in predicates and filters, defaults to false.
          Useful with eureka when it automatically uppercases serviceId. so MYSERIVCE, would match /myservice/**
Using these options, the Spring Cloud Gateway automatically uses the Eureka service ID of the service being called and
maps it to a downstream service instance. For instance, if we want to call our organization service and use automated
routing via the Spring Cloud Gateway, we would have our client call the Gateway service instance using the following
 URL as the endpoint:
 http://localhost:8072/organization-service/v1/organization/958aa1bf-18dc-405c-b84a-b69f04d98d4f
 The Gateway server is accessed via the http://localhost:8072 endpoint. The service we want to invoke (the organization service)
  is represented by the first part of the end- point path in the service.

If we want to see the routes managed by the Gateway server, we can list the routes via the
actuator/gateway/routes endpoint on the Gateway server:
http://localhost:8072/actuator/gateway/routes

 Manual mapping of routes using service discovery:
Spring Cloud Gateway allows our code to be more fine-grained by allowing us to explicitly define route mappings rather
than relying solely on the automated routes created with the Eureka service ID

spring:
  cloud:
    gateway:
      routes:
      - id: organization-service
        uri: lb://organization-service
        predicates:
        - Path=/organization/**
        filters:
        - RewritePath=/organization/(?<path>.*), /$\{path}
By adding this configuration, we can now access the organization service by
 entering the /organization/v1/organization/{organization-id} route


Nota:
- When we use automated route mapping where the gateway exposes the service based solely on the Eureka service ID, if
 no service instances are run- ning, the gateway will not expose the route for the service. However, if we manually
 map a route to a service discovery ID and there are no instances reg- istered with Eureka, the gateway will still show
 the route. If we try to call the route for the nonexistent service, it will return a 500 HTTP error.

 - In a stable environment where not many new services are added, having to add the route manually is a straightforward
 task. However, in a large environment with many new services, this is a bit tedious.

 We have correlation IDs passed to each service(A TRVES DEL GATEWAY),
 it’s possible to trace a transaction as it flows through all the services
 involved in the call. To do this, you need to ensure that each service logs to a
  central log aggregation point that captures log entries from all of your services into a single point.
   Each log entry captured in the log aggregation service will have a correlation ID associated with it.

  When coupled with capturing data with the pre-filter, a gateway post-filter is an ideal location to collect metrics
  and complete any logging associated with the user’s transaction

  Resumen:
  - Spring Cloud Gateway contiene un conjunto de fábricas de filtros y predicados integrados.
  - Los predicados son objetos que nos permiten verificar si las solicitudes cumplen con un conjunto de requisitos dados.
    condiciones antes de ejecutar o procesar una solicitud.
  - Los filtros nos permiten modificar las solicitudes HTTP entrantes y salientes y
    respuestas
  - Spring Cloud Gateway se integra con el servidor Eureka de Netflix y puede
    mapear automáticamente los servicios registrados con Eureka a una ruta.
  - Usando Spring Cloud Gateway, puede definir manualmente las asignaciones de ruta en
    los archivos de configuración de la aplicación.
  - Al usar Spring Cloud Config Server, puede recargar dinámicamente la ruta
    asignaciones sin tener que reiniciar el servidor Gateway.
  - Los filtros previos(prefilters) se pueden usar para generar una identificación de conexiones que se puede inyectar en
    todos los servicios que fluyen a través de la puerta de enlace.
  - Los filtros posteriores(postfilters) se pueden usar para inyectar una identificación de correlación en cada servicio HTTP
    respuesta a un cliente de servicio.
