version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafkaserver
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
#      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_CREATE_TOPICS: dresses:1:1,ratings:1:1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
  database:
    container_name: database
    image: postgres:latest
    ports:
      - "5433:5433"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root123"
      PGPASSWORD: "root123"
      POSTGRES_DB:       "ostock_dev"
      PGPORT: 5433
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  configserver:
    container_name: configserver
    image: rquispe/config-server:1.0-SNAPSHOT
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
    ports:
      - "8071:8071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    container_name: eurekaserver
    image: rquispe/eureka-server:1.0-SNAPSHOT
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
    ports:
      - "8070:8070"
    environment:
      CONFIG_SERVER_URI: "http://configserver:8071/"
      EUREKA_SERVER_URI: "http://eurekaserver:8070/eureka/"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"
  gatewayserver:
    container_name: gatewayserver
    image: rquispe/gateway-server:1.0-SNAPSHOT
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
    ports:
      - "8072:8072"
    environment:
      CONFIG_SERVER_URI: "http://configserver:8071/"
      EUREKA_SERVER_URI: "http://eurekaserver:8070/eureka/"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"
  keycloak:
    image: quay.io/keycloak/keycloak:20.0.5
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - "keycloak"
    entrypoint: ["/opt/keycloak/bin/kc.sh", "start-dev"]
  licensingservice:
    container_name: licensingservice
    image: rquispe/licensing-service:1.0-SNAPSHOT
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
    environment:
      CONFIG_SERVER_URI: "http://configserver:8071/"
      EUREKA_SERVER_URI: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5433/ostock_dev"
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8180:8080"
    networks:
      - backend
  organizationservice:
    container_name: organizationservice
    image: rquispe/organization-service:1.0-SNAPSHOT
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
    environment:
      CONFIG_SERVER_URI: "http://configserver:8071/"
      EUREKA_SERVER_URI: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5433/ostock_dev"
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - "discovery.type=single-node"
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./esdata1:/usr/share/elasticsearch/data
    ports:
#      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.2
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
    depends_on:
      - elasticsearch
  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.2
    container_name: logstash
#    Loads the Logstash config from a specific file or directory
#    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      backend:
        aliases:
          - "logstash"
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9200"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"
volumes:
  esdata1:
    driver: local
networks:
  backend:
    driver: bridge
